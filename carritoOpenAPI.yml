openapi: "3.0.2"
info:
  title: Cart Microservice API
  version: "1.0"
tags:
  - name: Carts
  - name: Products
paths:
  /carts:
    get:
      tags:
        - Carts
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - DRAFT
              - SUBMITTED
              - ALL
      responses:
        "200":
          description: Returns list of Carts sorted by status
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/carts_array.json"
    post:
      tags:
        - Carts
      requestBody:
        description: User JSON
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: New Cart created.
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/cart.json"
        "400":
          description: Wrong request body, must be User
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/validation_error.json"

  /carts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    patch:
      tags:
        - Carts
      requestBody:
        description: ProductToAdd JSON
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductToAdd"
      responses:
        "200":
          description: Cart updated
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/cart.json"

        "400":
          description: Wrong ProductToAdd JSON
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/validation_error.json"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/base_error.json"
    delete:
      tags:
        - Carts
      responses:
        "200":
          description: Cart deleted.
        "404":
          description: Cart not found.
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/base_error.json"
  /carts/users/{userId}: 
    parameters:
      - name: userId
        in: path
        required: true
        schema:
         type: integer
    get:
      tags:
        - Carts
      responses:
        '200':
          description: Returns a list of Carts with SUBMITTED status for the given User
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/carts_array.json"
  /products:
    get:
      tags:
        - Products
      responses:
        '200':
          description: Returns a list of products sorted by price.
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/products_array.json"

  /products/{catalogId}:
    summary: Controls the state of products in every cart with a DRAFT status.
    parameters:
      - name: catalogId
        in: path
        required: true
        schema:
          type: integer
    patch:
      tags:
        - Products
      description: Updates every product with matching id with the given requestBody
      requestBody:
        description: ProductToAdd JSON
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductToEdit"
      responses:
        "200":
          description: Products updated correctly.
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/cart_count.json"
        "400":
          description: Wrong ProducJSON
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/validation_error.json"
        "404":
          description: No product with the given id found.
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/base_error.json"
    delete:
      tags:
        - Products
      description: Deletes product with matching id with the given requestBody
      responses:
        "200":
          description: Products deleted correctly.
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/cart_count.json"
        "404":
          description: No product with the given id found.
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/validation_error.json"

  /carts/submit/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    patch:
      tags:
        - Products
      responses:
        "200":
          description: Cart submitted.
        "400":
          description: Out of stock or invalid User data.
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/base_error.json"
        "404":
          description: Cart not found.
          content:
            application/json:
              schema:
                $ref: "src/main/resources/schema/base_error.json"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        email:
          type: string
        paymentMethod:
          type: string
          enum:
            - VISA
            - PAYPAL
            - TRANSFER
    ProductToAdd:
      type: object
      required:
        - id
        - price
        - quantity
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Pelota Adidas
        description:
          type: string
          example: Pelota Adidas Futbol Profesional.
        price:
          type: number
          format: double
          example: 19.99
        quantity:
          type: integer
          format: int64
          example: 42
    ProductToEdit:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Pelota Adidas
        description:
          type: string
          example: Pelota Adidas Futbol Profesional.
        price:
          type: number
          format: double
          example: 19.99