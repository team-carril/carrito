openapi: "3.0.2"
info:
  title: Cart
  version: "1.0"
paths:
  /carts:
    get:
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - DRAFT
              - SUBMITTED
              - ALL
      responses:
        "200":
          description: Returns list of Carts sorted by status
          content:
            application/json:
              schema:
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Cart"
    post:
      requestBody:
        description: User JSON
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: New Cart created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          description: Wrong request body, must be User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestBodyResponse"

  /carts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    patch:
      requestBody:
        description: ProductToAdd JSON
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductToAdd"
      responses:
        "200":
          description: Cart updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"

        "400":
          description: Wrong ProductToAdd JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestBodyResponse"
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      responses:
        "200":
          description: Cart deleted.
        "404":
          description: Cart not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /products/{id}:
    summary: Controls the state of products in every cart with a DRAFT status.
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    patch:
      description: Updates every product with matching id with the given requestBody
      requestBody:
        description: ProductToAdd JSON
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductToEdit"
      responses:
        "200":
          description: Products updated correctly.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartCountResponse"
        "400":
          description: Wrong ProducJSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestBodyResponse"
        "404":
          description: No product with the given id found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestBodyResponse"
    delete:
      description: Deletes product with matching id with the given requestBody
      responses:
        "200":
          description: Products deleted correctly.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartCountResponse"
        "404":
          description: No product with the given id found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestBodyResponse"

  /carts/submit/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    patch:
      responses:
        "200":
          description: Cart submitted.
        "400":
          description: Out of stock or invalid User data.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Cart not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        email:
          type: string
        paymentMethod:
          type: string
          enum:
            - VISA
            - PAYPAL
            - TRANSFER
    ProductToAdd:
      type: object
      required:
        - id
        - price
        - quantity
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Pelota Adidas
        description:
          type: string
          example: Pelota Adidas Futbol Profesional.
        price:
          type: number
          format: double
          example: 19.99
        quantity:
          type: integer
          format: int64
          example: 42
    ProductToEdit:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Pelota Adidas
        description:
          type: string
          example: Pelota Adidas Futbol Profesional.
        price:
          type: number
          format: double
          example: 19.99
    Product:
      type: object
      properties:
        catalogId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Pelota Adidas
        description:
          type: string
          example: Pelota Adidas Futbol Profesional.
        price:
          type: number
          format: double
          example: 19.99
        quantity:
          type: integer
          format: int64
          example: 48
    Cart:
      type: object
      properties:
        id:
          type: string
          description: "UUID string"
          example: "123e4567-e89b-12d3-a456-426655440000"
        userId:
          type: integer
          format: int
          description: "id of the User, from /users endpoint"
          example:
        createdAt:
          type: string
          description: "Date of creation"
          example: "yyyy-MM-dd HH:mm:s"
        updatedAt:
          type: string
          description: "Date of creation"
          example: "yyyy-MM-dd HH:mm:s"
        status:
          type: string
          enum:
            - DRAFT
            - SUBMITTED
          example: "DRAFT"
        totalPrice:
          type: number
          format: double
        products:
          items:
            type: array
            items:
              $ref: "#/components/schemas/Product"
    CartCountResponse:
      description: For the /products/ routes, holds the number of carts affected.
      type: object
      properties:
        cartsChanged:
          type: integer
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          example: "yyyy-MM-dd HH:mm:ss"
        msg:
          type: string
          example: "Missing User id"
    BadRequestBodyResponse:
      type: object
      properties:
        timestamp:
          type: string
          example: "yyyy-MM-dd HH:mm:ss"
        errorCount:
          type: integer
        errors:
          type: object
          properties:
            nameOfField:
              type: string
